cmake_minimum_required(VERSION 2.8)

project(ranking CXX)

# set(CXX_FLAGS -Wall -std=c++11)

enable_testing()
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release")
endif()

set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -g -ggdb -Wall -std=c++11")
set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall -std=c++11")

if(CMAKE_BUILD_BITS EQUAL 32)
  list(APPEND CXX_FLAGS "-m32")
endif()

set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)

set(BUILD_SHARED_LIBRARIES OFF)
set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "") # remove -rdynamic
set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "")
# set(CMAKE_EXE_LINKER_FLAGS "-static")
set(CMAKE_EXE_LINKER_FLAGS "-static-libgcc -static-libstdc++")

find_package(Boost REQUIRED)
include_directories(${Boost_INCLUDE_DIRS})

# find_path(BOOST_INC NAMES boost/asio.hpp boost/thread.hpp)
# find_library(BOOST_LIB NAMES libboost_system.a libboost_thread.a)
# if(BOOST_INC AND BOOST_LIB)
#   message(STATUS "Found boost header in ${BOOST_INC}")
#   include_directories(${BOOST_INC})
#   message(STATUS "Found boost library ${BOOST_LIB}")
#   # link_directories(${BOOST_LIB})
# else()
#   message(FATAL_ERROR "Package boost is required, but not found")
# endif()

find_path(MYCON_INC cppconn/config.h)
find_library(MYCON_LIB mysqlcppconn)
# find_library(MYCON_LIB libmysqlcppconn.a)
if(MYCON_INC AND MYCON_LIB)
  message(STATUS "Found mysql cpp connector header in ${MYCON_INC}")
  include_directories(${MYCON_INC})
  message(STATUS "Found mysql cpp connector library ${MYCON_LIB}")
  # link_directories(${MYCON_LIB})
else()
  message(FATAL_ERROR "Package mysql cpp connector is required, but not found")
endif()

find_path(GLOG_INC glog/logging.h)
find_library(GLOG_LIB glog)
if(GLOG_INC AND GLOG_LIB)
  message(STATUS "Found google glog header in ${GLOG_INC}")
  include_directories(${GLOG_INC})
  message(STATUS "Found google glog library ${GLOG_LIB}")
  # link_directories(${GLOG_LIB})
else()
  message(FATAL_ERROR "Package google glog is required, but not found")
endif()

find_path(GFLAGS_INC gflags/gflags.h)
find_library(GFLAGS_LIB gflags)
if(GFLAGS_INC AND GFLAGS_LIB)
  message(STATUS "Found google gflags header in ${GFLAGS_INC}")
  include_directories(${GFLAGS_INC})
  message(STATUS "Found google gflags library ${GFLAGS_LIB}")
  # link_directories(${GFLAGS_LIB})
else()
  message(FATAL_ERROR "Package google gflags is required, but not found")
endif()

find_path(GTEST_INC gtest/gtest.h)
if(GTEST_INC)
  message(STATUS "Found google gtest header in ${GTEST_INC}")
  include_directories(${GTEST_INC})
else()
  message(FATAL_ERROR "Package google gtest is required, but not found")
endif()

add_subdirectory(svr)
add_subdirectory(http)
add_subdirectory(ranking)

include_directories(thirdparty)
