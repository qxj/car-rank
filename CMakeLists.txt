cmake_minimum_required(VERSION 2.8)

project(ranking)

set(CMAKE_BUILD_TYPE "Debug")
set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -std=c++11 -g -ggdb")
set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall -std=c++11")

set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)


find_path(MYCON_INC cppconn/config.h)
find_library(MYCON_LIB libmysqlcppconn.a)
if(MYCON_INC AND MYCON_LIB)
  message(STATUS "Found mysql cpp connector header in ${MYCON_INC}")
  include_directories(${MYCON_INC})
  message(STATUS "Found mysql cpp connector library ${MYCON_LIB}")
  link_directories(${MYCON_LIB})
else()
  message(FATAL_ERROR "Package mysql cpp connector is required, but not found")
endif()

find_path(GLOG_INC glog/logging.h)
find_library(GLOG_LIB libglog.a)
if(GLOG_INC AND GLOG_LIB)
  message(STATUS "Found google glog header in ${GLOG_INC}")
  include_directories(GLOG_INC)
  message(STATUS "Found google glog library ${GLOG_LIB}")
  # link_directories(GLOG_LIB)
else()
  message(FATAL_ERROR "Package google glog is required, but not found")
endif()

find_path(GFLAGS_INC gflags/gflags.h)
find_library(GFLAGS_LIB libgflags.a)
if(GFLAGS_INC AND GFLAGS_LIB)
  message(STATUS "Found google gflags header in ${GFLAGS_INC}")
  include_directories(GFLAGS_INC)
  message(STATUS "Found google gflags library ${GFLAGS_LIB}")
  # link_directories(GFLAGS_LIB)
else()
  message(FATAL_ERROR "Package google gflags is required, but not found")
endif()

find_path(GTEST_INC gtest/gtest.h)
if(GTEST_INC)
  message(STATUS "Found google gtest header in ${GTEST_INC}")
  include_directories(GTEST_INC)
else()
  message(FATAL_ERROR "Package google gtest is required, but not found")
endif()

add_subdirectory(svr)
add_subdirectory(http)
